def fibonacci_recursive(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)

def fibonacci_iterative(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        fib = [0] * (n + 1)
        fib[1] = 1
        for i in range(2, n + 1):
            fib[i] = fib[i - 1] + fib[i - 2]
        return fib[n]

# Calculate the nth Fibonacci number using both recursive and iterative methods
n = 10  # You can change n to the desired Fibonacci number
print(f"The {n}-th Fibonacci number (recursive) is: {fibonacci_recursive(n)}")
print(f"The {n}-th Fibonacci number (iterative) is: {fibonacci_iterative(n)}")



OR




import time

# Function to calculate Fibonacci number using recursion
def fibonacci_recursive(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)

# Function to calculate Fibonacci number using dynamic programming (bottom-up approach)
def fibonacci_dynamic_programming(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        fib = [0] * (n + 1)
        fib[1] = 1
        for i in range(2, n + 1):
            fib[i] = fib[i - 1] + fib[i - 2]
        return fib[n]

# Get user input
n = int(input("Enter the value of n to calculate the nth Fibonacci number: "))

# Measure time taken by recursive approach
start_time = time.time()
fib_recursive = fibonacci_recursive(n)
end_time = time.time()
time_recursive = end_time - start_time

# Measure time taken by dynamic programming approach
start_time = time.time()
fib_dp = fibonacci_dynamic_programming(n)
end_time = time.time()
time_dp = end_time - start_time

print(f"The {n}th Fibonacci number (using recursion) is: {fib_recursive}")
print(f"The {n}th Fibonacci number (using dynamic programming) is: {fib_dp}")

print(f"Time taken by recursion: {time_recursive:.6f} seconds")
print(f"Time taken by dynamic programming: {time_dp:.6f} seconds")



